{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["ComicsList","useState","comicsList","setComicsList","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","loading","error","getAllComics","useEffect","onRequest","firstCall","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","className","tabIndex","to","id","src","thumbnail","alt","title","price","renderComics","errorMessage","ErrorMessage","spinner","Spinner","disabled","style","display","onClick","ComicsPage","name","content","AppBanner","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","res","results","_transformCharacter","getCharacterByName","getCharacter","_transformComics","getComic","char","description","slice","path","extension","homepage","urls","wiki","comics","pageCount","language","textObjects","prices","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","avengers","avengersLogo"],"mappings":"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","file":"static/js/6.ad3d1760.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport \"./comicsList.scss\";\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const { loading, error, getAllComics } = useMarvelService(); // Из хука вытащил нужные\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []); // Выполнится только при создании компонента\n\n    const onRequest = (offset, firstCall) => {\n        firstCall ? setNewItemLoading(false) : setNewItemLoading(true);\n        // Показали спиннер когда новые герои загружаются (newItemLoading: true), но только при первом вызове (initialCall: false) (помощь)\n        getAllComics(offset).then(onComicsListLoaded);\n    }; // Получили массив всех персонажей через отступ offset() и установили в state (Главная)\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        } // Проверка на 8 последних комиксов и запись этого значения в comicsEnded\n        setComicsList((comicsList) => [...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset((offset) => offset + 8);\n        setComicsEnded(ended);\n    }; // Устанавливает comicsList в state + Добавляет новых персонажей в comicsList при нажатии на кнопку \"load more\" (помощь)\n\n    function renderComics(arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" tabIndex={0} key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\" />\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            );\n        });\n        return <ul className=\"comics__grid\">{items}</ul>;\n    } // Главный метод для оптимизации чтобы не помещать его в финальный return\n\n    const items = renderComics(comicsList); // В items лежат li с комиксами\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null; // Это загрузка но не загрузка новых комиксов\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                disabled={newItemLoading}\n                style={{ display: comicsEnded ? \"none\" : \"block\" }}\n                onClick={() => {\n                    onRequest(offset);\n                }}\n                className=\"button button__main button__long\"\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );\n};\n\nexport default ComicsList;\n","import { Helmet, HelmetProvider } from \"react-helmet-async\";\nimport AppBanner from \"../appBanner/AppBanner\";\nimport ComicsList from \"../comicsList/ComicsList\";\n\nconst ComicsPage = () => {\n    return (\n        <>\n            <HelmetProvider>\n                <Helmet>\n                    <meta name=\"description\" content=\"Page with a list of comics\" />\n                    <title>Comics page</title>\n                </Helmet>\n            </HelmetProvider>\n            <AppBanner />\n            <ComicsList />\n        </>\n    );\n};\n\nexport default ComicsPage;\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n    return (\n        <img\n            style={{\n                display: \"block\",\n                width: \"250px\",\n                height: \"250px\",\n                objectFit: \"contain\",\n                margin: \"0 auto\",\n            }}\n            src={img}\n            alt=\"Error_image\"\n        />\n    );\n};\n\nexport default ErrorMessage;\n","import { useHttp } from \"../hooks/http.hook\";\n\n// Get requests\nconst useMarvelService = () => {\n    const { loading, request, error, clearError } = useHttp();\n\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\"; // _ означает не трогать данные переменные для других разработчиков\n    const _apiKey = \"apikey=42666d0364f9ef05a9229fe8de769fa3\";\n    const _baseOffset = 210; //140 210\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        // Добавляем offset в аргументы для гибкости\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter); // Возвращает массив персонажей\n    };\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }; // Возвращает одного персонажа по имени\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }; // Возвращает одного персонажа по id\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }; // Вовзращает массив комиксов\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }; // Вовзращает один комикс по id\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description\n                ? `${char.description.slice(0, 210)}...`\n                : \"Unfortunately this character has no description\",\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items.slice(0, 10), // Массив\n        };\n    }; // Трансформирует персоанажа в нужный нам формат\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || \"Unfortunately this comics has no description\",\n            pageCount: comics.pageCount\n                ? `${comics.pageCount} pages`\n                : \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n            language: comics.textObjects.language || \"en-us\",\n            price: comics.prices[0].price === 0 ? \"Price not found\" : `${comics.prices[0].price}$`,\n        };\n    }; // Трансформирует комиксы в нужный нам формат\n\n    return {\n        loading,\n        error,\n        getAllCharacters,\n        getCharacter,\n        clearError,\n        getAllComics,\n        getComic,\n        getCharacterByName,\n    };\n};\n\nexport default useMarvelService;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(\n        async (\n            url,\n            method = \"GET\",\n            body = null,\n            headers = { \"Content-type\": \"application/json\" }\n        ) => {\n            setLoading(true); // Показываем спиннер в начале запроса\n            try {\n                // Try / catch - пытаемся сделать запрос на сервер\n                const response = await fetch(url, { method, body, headers });\n                // Response - ответ Await - ждем ответа от сервера\n                if (!response.ok) {\n                    throw new Error(`Couldn't fetch ${url}, status: ${response.status}`);\n                }\n                const data = await response.json(); // data - чистые данные которые мы получаем при запросе к API\n                setLoading(false); // Убираем спиннер\n                return data;\n            } catch (error) {\n                setLoading(false); // Убираем спиннер\n                setError(error.message); // Устанавливаем ошибку /Показываем текст ошибки\n                throw error; // Вернет ошибку\n            }\n        },\n        []\n    ); // Вернет чистые данные которые вернет API (data) или выкинет ошибку\n    // Сразу в нем контролируем спиннер при загрузке и ошибку при запросе данных\n\n    const clearError = useCallback(() => setError(null), []); //clearError перезатирает ошибку\n\n    return { loading, error, request, clearError }; // Возвращаем нужное\n};\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}