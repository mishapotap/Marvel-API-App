{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","objectFit","className","src","alt","style","length","slice","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","firstCall","onCharListLoaded","newCharList","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","tabIndex","ref","elem","onCharSelected","onKeyPress","e","key","renderItems","disabled","display","Skeleton","comics","CharInfo","charId","skeleton","CharSearchForm","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","ErrorBoundary","state","errorinfo","console","log","this","setState","children","Component","MainPage","selectedChar","decoration","width","height","margin","img","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/5.1170c5a0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n\n    const { loading, error, getCharacter, clearError } = useMarvelService(); // Из хука вытащил нужные\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 5000);\n        return () => {\n            clearInterval(timerId);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }; // Устанавливает персонажа в state (помощь)\n\n    const updateChar = () => {\n        clearError(); // Очистка ошибки перед каждым рандомом персонажа (иначе ее не скинуть если на нее наткнулись)\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000); // Рандомит персонажа\n        getCharacter(id).then(onCharLoaded);\n    }; // Главный метод (нет catch потому что он внутри хука)\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!\n                    <br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">Or choose another one</p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    );\n};\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n\n    let imgStyle = { objectFit: \"cover\" };\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n        imgStyle = { objectFit: \"contain\" };\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img\n                src={thumbnail}\n                alt=\"Random character\"\n                className=\"randomchar__img\"\n                style={imgStyle}\n            />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">\n                    {name && name.length > 20 ? `${name.slice(0, 21)}...` : name}\n                </p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">Homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport \"./charList.scss\";\n\nconst CharList = (props) => {\n    //props: onCharSelected={onCharSelected}\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { loading, error, getAllCharacters } = useMarvelService(); // Из хука вытащил нужные\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []); // Выполнится только при создании компонента\n\n    const onRequest = (offset, firstCall) => {\n        firstCall ? setNewItemLoading(false) : setNewItemLoading(true);\n        // Показали спиннер когда новые герои загружаются (newItemLoading: true), но только при первом вызове (firstCall: false) (помощь)\n        getAllCharacters(offset).then(onCharListLoaded);\n    }; // Получили массив всех персонажей через отступ offset() и установили в state (Главная)\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        } // Проверка на 9 последних персонажей и запись этого значения в charEnded\n        setCharList((charList) => [...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset((offset) => offset + 9);\n        setCharEnded(ended);\n    }; // Устанавливает charList в state + Добавляет новых персонажей в charList при нажатии на кнопку \"load more\" (помощь)\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach((item) => item.classList.remove(\"char__item_selected\"));\n        itemRefs.current[id].classList.add(\"char__item_selected\");\n        itemRefs.current[id].focus();\n    }; // Фокус на элементе\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { objectFit: \"cover\" };\n            if (\n                item.thumbnail ===\n                \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n            ) {\n                imgStyle = { objectFit: \"unset\" };\n            } // Центрирование картинки not available\n\n            return (\n                <li\n                    className=\"char__item\"\n                    key={item.id}\n                    tabIndex={0}\n                    ref={(elem) => (itemRefs.current[i] = elem)}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === \" \" || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}\n                >\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            );\n        });\n        return <ul className=\"char__grid\">{items}</ul>;\n    } // Главный метод для оптимизации чтобы не помещать его в финальный return\n\n    const items = renderItems(charList); // В items лежат li с героями\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null; // Это загрузка но не загрузка новых персонажей\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                disabled={newItemLoading}\n                style={{ display: charEnded ? \"none\" : \"block\" }}\n                onClick={() => {\n                    onRequest(offset);\n                }}\n                className=\"button button__main button__long\"\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );\n};\nCharList.propTypes = {\n    onCharSelected: PropTypes.func,\n}; // Проверка пропсов на тип (если нам вернется не функция то в терминале будет уведомление)\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\n\nimport \"./charInfo.scss\";\n// Отписываться от таймаутов\n// Ставить зависимости в useEffect чтобы не попасть в бесконечный цикл\nconst CharInfo = (props) => {\n    // props: charId={selectedChar} - id выбранного персонажа\n\n    const [char, setChar] = useState(null);\n\n    const { loading, error, getCharacter, clearError } = useMarvelService(); // Из хука вытащил нужные\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.charId]); // Сработает и при mount и при обновлении персонажа\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId).then(onCharLoaded);\n    }; // Главный метод (нет спиннера и catch потому что они внутри хука useMarvelService)\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }; // Устанавливает персонажа в state (помощь)\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    );\n};\n\nconst View = ({ char }) => {\n    const { name, thumbnail, homepage, wiki, description, comics } = char;\n\n    let imgStyle = { objectFit: \"cover\" };\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n        imgStyle = { objectFit: \"contain\" };\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length === 0\n                    ? \"Unfortunately, there is no comics with this character\"\n                    : null}\n                {comics.map((item, i) => {\n                    return (\n                        <li key={i} className=\"char__comics-item\">\n                            {item.name}\n                        </li>\n                    );\n                })}\n            </ul>\n        </>\n    );\n};\nCharInfo.propTypes = {\n    charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Link } from \"react-router-dom\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./charSearchForm.scss\";\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const { loading, error, getCharacterByName, clearError } = useMarvelService(); // Из хука вытащил нужные\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }; // Устанавливает персонажа в state\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name).then(onCharLoaded);\n    }; // Главный метод (нет спиннера и catch потому что они внутри хука useMarvelService)\n\n    const errorMessage = error ? (\n        <div className=\"char__search-critical-error\">\n            <ErrorMessage />\n        </div>\n    ) : null;\n    const results = !char ? null : char.length > 0 ? (\n        <div className=\"char__search-wrapper\">\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                <div className=\"inner\">To page</div>\n            </Link>\n        </div>\n    ) : (\n        <div className=\"char__search-error\">\n            The character was not found. Check the name and try again\n        </div>\n    ); // Если нет персонажа не возвращаем ничего\n    // Если в массиве результатов results ничего нет то возвращаем блок с ошибкой а если массив получен (в state char.length > 0) то вставляем основную верстку\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues={{\n                    charName: \"\",\n                }}\n                validationSchema={Yup.object({\n                    charName: Yup.string().required(\"This field is required\"),\n                })}\n                onSubmit={({ charName }) => {\n                    updateChar(charName);\n                }} // При отправке формы ставим имя в state\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">\n                        Find a character by name:\n                    </label>\n                    <div className=\"char__search-wrapper\">\n                        <Field id=\"charName\" name=\"charName\" type=\"text\" placeholder=\"Enter name\" />\n                        <button type=\"submit\" className=\"button button__main\" disabled={loading}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage\n                        component=\"div\"\n                        className=\"char__search-error\"\n                        name=\"charName\"\n                    />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    );\n};\n\nexport default CharSearchForm;\n","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false,\n    };\n    componentDidCatch(error, errorinfo) {\n        console.log(error, errorinfo);\n        this.setState({ error: true });\n    }\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage />;\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\nimport { Helmet, HelmetProvider } from \"react-helmet-async\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport decoration from \"../../resources/img/vision.png\";\n\nconst MainPage = () => {\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }; // Установили id выбранного персонажа в state\n\n    return (\n        <>\n            <HelmetProvider>\n                <Helmet>\n                    <meta name=\"description\" content=\"Marvel information portal\" />\n                    <title>Marvel information portal</title>\n                </Helmet>\n            </HelmetProvider>\n            <ErrorBoundary>\n                <RandomChar />\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected} />\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharSearchForm />\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar} />\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n        </>\n    );\n};\n\nexport default MainPage;\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n    return (\n        <img\n            style={{\n                display: \"block\",\n                width: \"250px\",\n                height: \"250px\",\n                objectFit: \"contain\",\n                margin: \"0 auto\",\n            }}\n            src={img}\n            alt=\"Error_image\"\n        />\n    );\n};\n\nexport default ErrorMessage;\n","import { useHttp } from \"../hooks/http.hook\";\n\n// Get requests\nconst useMarvelService = () => {\n    const { loading, request, error, clearError } = useHttp();\n\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\"; // _ означает не трогать данные переменные для других разработчиков\n    const _apiKey = \"apikey=42666d0364f9ef05a9229fe8de769fa3\";\n    const _baseOffset = 210; //140 210\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        // Добавляем offset в аргументы для гибкости\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter); // Возвращает массив персонажей\n    };\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }; // Возвращает одного персонажа по имени\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }; // Возвращает одного персонажа по id\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }; // Вовзращает массив комиксов\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }; // Вовзращает один комикс по id\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description\n                ? `${char.description.slice(0, 210)}...`\n                : \"Unfortunately this character has no description\",\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items.slice(0, 10), // Массив\n        };\n    }; // Трансформирует персоанажа в нужный нам формат\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || \"Unfortunately this comics has no description\",\n            pageCount: comics.pageCount\n                ? `${comics.pageCount} pages`\n                : \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n            language: comics.textObjects.language || \"en-us\",\n            price: comics.prices[0].price === 0 ? \"Price not found\" : `${comics.prices[0].price}$`,\n        };\n    }; // Трансформирует комиксы в нужный нам формат\n\n    return {\n        loading,\n        error,\n        getAllCharacters,\n        getCharacter,\n        clearError,\n        getAllComics,\n        getComic,\n        getCharacterByName,\n    };\n};\n\nexport default useMarvelService;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(\n        async (\n            url,\n            method = \"GET\",\n            body = null,\n            headers = { \"Content-type\": \"application/json\" }\n        ) => {\n            setLoading(true); // Показываем спиннер в начале запроса\n            try {\n                // Try / catch - пытаемся сделать запрос на сервер\n                const response = await fetch(url, { method, body, headers });\n                // Response - ответ Await - ждем ответа от сервера\n                if (!response.ok) {\n                    throw new Error(`Couldn't fetch ${url}, status: ${response.status}`);\n                }\n                const data = await response.json(); // data - чистые данные которые мы получаем при запросе к API\n                setLoading(false); // Убираем спиннер\n                return data;\n            } catch (error) {\n                setLoading(false); // Убираем спиннер\n                setError(error.message); // Устанавливаем ошибку /Показываем текст ошибки\n                throw error; // Вернет ошибку\n            }\n        },\n        []\n    ); // Вернет чистые данные которые вернет API (data) или выкинет ошибку\n    // Сразу в нем контролируем спиннер при загрузке и ошибку при запросе данных\n\n    const clearError = useCallback(() => setError(null), []); //clearError перезатирает ошибку\n\n    return { loading, error, request, clearError }; // Возвращаем нужное\n};\n"],"sourceRoot":""}