{"version":3,"sources":["components/singleChar/SingleChar.js","components/pages/SingleCharPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["View","char","name","thumbnail","description","content","AppBanner","className","src","alt","to","SingleChar","charId","useParams","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","then","onCharLoaded","errorMessage","ErrorMessage","spinner","Spinner","SingleCharPage","style","display","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","id","getAllComics","_transformComics","getComic","slice","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","avengers","avengersLogo"],"mappings":"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","file":"static/js/7.33aa54f5.chunk.js","sourcesContent":["import { useParams, Link } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { Helmet, HelmetProvider } from \"react-helmet-async\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport AppBanner from \"../appBanner/AppBanner\";\nimport \"./singleChar.scss\";\n\nconst SingleChar = () => {\n    const { charId } = useParams(); // Вытащил charId из параметров\n    const [char, setChar] = useState(null);\n    const { loading, error, getCharacter, clearError } = useMarvelService(); // Из хука вытащил нужные\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [charId]);\n\n    const updateChar = () => {\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId).then(onCharLoaded);\n    }; // Главный метод (нет спиннера и catch потому что они внутри хука useMarvelService)\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }; // Устанавливает персонажа в state (помощь)\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n    return (\n        <>\n            {errorMessage}\n            {spinner}\n            {content}\n        </>\n    );\n};\n\nconst View = ({ char }) => {\n    const { name, thumbnail, description } = char;\n    return (\n        <>\n            <HelmetProvider>\n                <Helmet>\n                    <meta name=\"description\" content={`Information about ${name}`} />\n                    <title>{`${name} page`}</title>\n                </Helmet>\n            </HelmetProvider>\n            <AppBanner />\n            <div className=\"single-comic\">\n                <img src={thumbnail} alt={name} className=\"single-comic__char-img\" />\n                <div className=\"single-comic__info\">\n                    <h2 className=\"single-comic__name\">{name}</h2>\n                    <p className=\"single-comic__descr\">{description}</p>\n                </div>\n                <Link to=\"/characters\" className=\"single-comic__back\">\n                    Back to all\n                </Link>\n            </div>\n        </>\n    );\n};\n\nexport default SingleChar;\n","import SingleChar from \"../singleChar/SingleChar\";\n\nconst SingleCharPage = () => {\n    return <SingleChar />;\n};\n\nexport default SingleCharPage;\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n    return (\n        <img\n            style={{\n                display: \"block\",\n                width: \"250px\",\n                height: \"250px\",\n                objectFit: \"contain\",\n                margin: \"0 auto\",\n            }}\n            src={img}\n            alt=\"Error_image\"\n        />\n    );\n};\n\nexport default ErrorMessage;\n","import { useHttp } from \"../hooks/http.hook\";\n\n// Get requests\nconst useMarvelService = () => {\n    const { loading, request, error, clearError } = useHttp();\n\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\"; // _ означает не трогать данные переменные для других разработчиков\n    const _apiKey = \"apikey=42666d0364f9ef05a9229fe8de769fa3\";\n    const _baseOffset = 210; //140 210\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        // Добавляем offset в аргументы для гибкости\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter); // Возвращает массив персонажей\n    };\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }; // Возвращает одного персонажа по имени\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }; // Возвращает одного персонажа по id\n\n    const getAllComics = async (offset = 0) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics);\n    }; // Вовзращает массив комиксов\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }; // Вовзращает один комикс по id\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description\n                ? `${char.description.slice(0, 210)}...`\n                : \"Unfortunately this character has no description\",\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items.slice(0, 10), // Массив\n        };\n    }; // Трансформирует персоанажа в нужный нам формат\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || \"Unfortunately this comics has no description\",\n            pageCount: comics.pageCount\n                ? `${comics.pageCount} pages`\n                : \"No information about the number of pages\",\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n            language: comics.textObjects.language || \"en-us\",\n            price: comics.prices[0].price === 0 ? \"Price not found\" : `${comics.prices[0].price}$`,\n        };\n    }; // Трансформирует комиксы в нужный нам формат\n\n    return {\n        loading,\n        error,\n        getAllCharacters,\n        getCharacter,\n        clearError,\n        getAllComics,\n        getComic,\n        getCharacterByName,\n    };\n};\n\nexport default useMarvelService;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(\n        async (\n            url,\n            method = \"GET\",\n            body = null,\n            headers = { \"Content-type\": \"application/json\" }\n        ) => {\n            setLoading(true); // Показываем спиннер в начале запроса\n            try {\n                // Try / catch - пытаемся сделать запрос на сервер\n                const response = await fetch(url, { method, body, headers });\n                // Response - ответ Await - ждем ответа от сервера\n                if (!response.ok) {\n                    throw new Error(`Couldn't fetch ${url}, status: ${response.status}`);\n                }\n                const data = await response.json(); // data - чистые данные которые мы получаем при запросе к API\n                setLoading(false); // Убираем спиннер\n                return data;\n            } catch (error) {\n                setLoading(false); // Убираем спиннер\n                setError(error.message); // Устанавливаем ошибку /Показываем текст ошибки\n                throw error; // Вернет ошибку\n            }\n        },\n        []\n    ); // Вернет чистые данные которые вернет API (data) или выкинет ошибку\n    // Сразу в нем контролируем спиннер при загрузке и ошибку при запросе данных\n\n    const clearError = useCallback(() => setError(null), []); //clearError перезатирает ошибку\n\n    return { loading, error, request, clearError }; // Возвращаем нужное\n};\n","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}